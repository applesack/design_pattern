# 开闭原则
定义：一个软件实体，如类、、模块和函数对应扩展开放，对修改关闭
用抽象构建框架，用实现扩展细节
优点：提高软件系统的可复用性及可维护性。
具体应用方式：
    - 高层模块依赖接口，实现类实现接口的基本功能，后续需要增加新的功能时，扩展实现类实现针对性的功能，
    - 在高层需要这个特定的功能的时候拿子类的实现就行了，这样就可以在不修改基本实现类的情况下扩展功能，可维护性高

# 依赖倒置原则
定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象
抽象不应该依赖细节；细节应该依赖抽象
针对接口编程，不要针对实现编程
优点：可以减少类之间的耦合性、提高系统稳定性，提高代码可读性和可维护性，可降低修改程序所造成的风险。
具体应用方式：
    - 当某种功能有多种实现时，例如http请求有get和post，可以将“请求”这个行为抽象成接口，交给具体的实现类来实现功能
    - 然后服务类在需要“请求”功能实现的地方依赖接口，具体实现由应用层所注入的实现类决定，
    - 这样高层模块和底层模块解耦，当需要接口新的实现的时候只需要增加实现类，由于服务类依赖的是接口，所以服务类并不受影响，可维护性提高。

# 单一职责原则
定义：不要存在多于一个导致类变更的原因
一个类/接口/方法只负责一项职责
优点：降低类的复杂度、提高类的可读性，提高系统的可维护性、降低变更引起的风险
    - 一般来说，做到接口和方法符合这个原则就行

# 接口隔离原则
定义：用多个专门的接口，而不使用单一的总接口，客户端不应以依赖它不需要的接口。
一个类对一个对类的依赖应该建立在最小接口上。
1. 建立单一接口，不要建立庞大臃肿的接口
2. 尽量细化接口，接口中的方法尽量少
3. 注意适度原则，一定要适度
优点：符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性。

